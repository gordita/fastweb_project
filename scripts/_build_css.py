import os
import re
import buildconfig


CSS_NAME_PATTERN = r'\.[A-Z_]+[\s{:,\.]'
CSS_NAME_GROUPS_PATTERN = r'(\.)([A-Z_]+)([\s{:,\.])'

JS_CODE_TEMPLATE = """
// Auto-generated Code. Do not edit this file.
goog.provide('tpl.CSS_NAMES');

/**
 * @type {Object}
 */
tpl.CSS_NAMES = {};

// Define css names below.
%s
"""

JS_DEFINE_NEW_CSS_NAME_CODE_TEMPLATE = """
/** @type {string} %s */
var %s = '%s';
/** @type {string} */
tpl.CSS_NAMES.%s = COMPILED ? '%s' : '%s';
"""

JS_DEFINE_USED_CSS_NAME_CODE_TEMPLATE = """
// %s
// var %s = '%s';
"""

CSS_NAMES_JS_OUTPUT_FILE_PATH = '%s/hw/cssnames.js' % (
  buildconfig.RESOURCE_ROOT)

CSS_NEW_NAME_TEMPLATE = 'H%s'

def get_css_text(path, str_buffer) :
  file = open(path)
  for line in file.xreadlines() :
    str_buffer.append(line)
  file.close()

CSS_NAMES = {}
CSS_NAME_COUNT = 0


def rename_css_name(matched_str, js_vars) :
  groups = re.findall(CSS_NAME_GROUPS_PATTERN, matched_str)
  old_name = groups[0][1] # FOO_BAR
  if old_name in CSS_NAMES :
    new_name = CSS_NAMES.get(old_name)
    values = (matched_str, old_name, new_name)
    js_vars.append(JS_DEFINE_USED_CSS_NAME_CODE_TEMPLATE % values)
  else :
    global CSS_NAME_COUNT
    new_name = CSS_NEW_NAME_TEMPLATE % hex(CSS_NAME_COUNT)[2 :]
    new_name = new_name.upper()
    CSS_NAMES[old_name] = new_name
    CSS_NAME_COUNT += 1
    values = (matched_str, old_name, new_name, old_name, new_name, old_name)
    js_vars.append(JS_DEFINE_NEW_CSS_NAME_CODE_TEMPLATE % values)

  result = '%s%s%s' % (groups[0][0], new_name, groups[0][2])
  return result


def write_text(path, text) :
  file = open(path, 'w')
  file.write(text)
  file.close()


def build_css() :
  all_css_text = []
  for css in buildconfig.CSS_SOURCES :
    path = '%s/css/%s.css' % (buildconfig.RESOURCE_ROOT, css)
    get_css_text(path, all_css_text)
  all_css_text = ''.join(all_css_text)

  raw_path = '%s/raw.all.css' % buildconfig.BUILD_ROOT
  write_text(raw_path, all_css_text)

  min_path = '%s/min.all.css' % buildconfig.BUILD_ROOT

  cmd = 'java -jar %s %s > %s' % (
    buildconfig.CSS_COMPILER_PATH,
    raw_path,
    min_path)

  os.system(cmd)
  min_css_text = []
  get_css_text(min_path, min_css_text)
  min_css_text = ''.join(min_css_text)

  js_vars = []
  css_names = re.findall(CSS_NAME_PATTERN, min_css_text)
  old_new_css_names = [(cn, rename_css_name(cn, js_vars))for cn in css_names]

  bin_css_text = min_css_text
  for pair in old_new_css_names :
    bin_css_text = bin_css_text.replace(pair[0], pair[1])

  bin_css_path = '%s/bin.all.css' % buildconfig.BUILD_ROOT
  write_text(bin_css_path, bin_css_text)
  # print bin_css_text

  js_code = JS_CODE_TEMPLATE % ''.join(js_vars)
  write_text(CSS_NAMES_JS_OUTPUT_FILE_PATH, js_code)


def build_images() :
  print('build images')
  cmd_cp_images = """
  mkdir -p %s/images;
  cp %s/css/images/* %s/images;
  """ % (
    buildconfig.BUILD_ROOT, buildconfig.RESOURCE_ROOT, buildconfig.BUILD_ROOT)
  os.system(cmd_cp_images)


def build_embeded_image() :
  bin_css_input_path = '%s/bin.all.css' % buildconfig.BUILD_ROOT
  bin_css_output_path = '%s/bin.all.embed.css' % buildconfig.BUILD_ROOT
  cmd = 'java -jar %s -o %s %s' % (
    buildconfig.CSS_EMBEDED_PATH,
    bin_css_output_path,
    bin_css_input_path)
  os.system(cmd)

if __name__ == '__main__' :
  build_css()
  build_images()
  build_embeded_image()
  os.system('ls -al %s/*.css' % buildconfig.BUILD_ROOT)
  os.system('ls -al %s/images' % buildconfig.BUILD_ROOT)